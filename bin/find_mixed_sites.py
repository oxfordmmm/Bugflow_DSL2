#!/usr/bin/env python3

import argparse
import pandas as pd
import pysam
import pysamstats

# CP010905.2
POSLIST = [1875017, 1875012, 1875006, 1875003, 1875002, 1874997, 1874985, 1874980, 1874979, 1874978, 1874976, 1874973, 1874967, 1874964, 1874963, 1874961, 1874958, 1874955, 1874952, 1874949, 1874948, 1874940, 1874939, 1874934, 1874933, 1874932, 1874931, 1874930, 1874928, 1874922, 1874921, 1874912, 1874910, 1874907, 1874904, 1874901, 1874899, 1874898, 1874894, 1874892, 1874889, 1874883, 1874880, 1874877, 1874875, 1874874, 1874873, 1874872, 1874868, 1874866, 1874865, 1874862, 1874859, 1874856, 1874855, 1874853, 1874852, 1874850, 1874848, 1874847, 1874843, 1874841, 1874832, 1874829, 1874828, 1874826, 1874824, 1874823, 1874822, 1874820, 1874817, 1874814, 1874808, 1874805, 1874790, 1874785, 1874784, 1874781, 1874778, 1874773, 1874772, 1874769, 1874760, 1874752, 1874751, 1874750, 1874749, 1874748, 1874745, 1874742, 1874741, 1874739, 1874737, 1874733, 1874730, 1874729, 1874728, 1874727, 1874717, 1874715, 1874712, 1874709, 1874708, 1874706, 1874703, 1874700, 1874699, 1874694, 1874693, 1874691, 1874690, 1874688, 1874684, 1874682, 1874679, 1874676, 1874674, 1874673, 1874671, 1874668, 1874665, 1874663, 1874657, 1874655, 1874654, 1874652, 1874651, 1874649, 1874643, 1874638, 1874637, 1874635, 1874634, 1874631, 1874628, 1874627, 1874624, 1874623, 1874622, 1874620, 1874617, 1874615, 1874614, 1874610, 1874607, 1874604, 1874602, 1874601, 1874597, 1874593, 1874592, 1874587, 1874586, 1874585, 1874583, 1874581, 1874580, 1874574, 1874571, 1874568, 3692152, 3692151, 3692150, 3692149, 3692148, 3692146, 3692144, 3692143, 3692142, 3692141, 3692140, 3692139, 3692138, 3692137, 3692136, 3692135, 3692134, 3692133, 3692132, 3692131, 3692130, 3692129, 3692128, 3692127, 3692126, 3692125, 3692124, 3692123, 3692122, 3692121, 3692118, 3692117, 3692116, 3692115, 3692114, 3692113, 3692112, 3692111, 3692110, 3692108, 3692107, 3692106, 3692105, 3692103, 3692102, 3692101, 3692099, 3692098, 3692093, 3692092, 3692091, 3692090, 3692088, 3692085, 3692084, 3692083, 3692081, 3692080, 3692079, 3692078, 3692077, 3692076, 3692075, 3692073, 3692072, 3692071, 3692070, 3692069, 3692068, 3692067, 3692066, 3692064, 3692063, 3692062, 3692060, 3692057, 3692055, 3692053, 3692052, 3692051, 3692050, 3692049, 3692048, 3692047, 3692045, 3692044, 3692042, 3692040, 3692039, 3692038, 3692036, 3692034, 3692033, 3692031, 3692030, 3692029, 3692028, 3692027, 3692026, 3692025, 3692023, 3692022, 3692021, 3692020, 3692019, 3692018, 3692017, 3692016, 3692015, 3692014, 3692013, 3692011, 3692007, 3692006, 3692005, 3692004, 3692003, 3692002, 3692001, 3691998, 3691997, 3691996, 3691995, 3691994, 3691993, 3691992, 3691991, 3691990, 3691989, 3691988, 3691986, 3691985, 3691984, 3691983, 3691982, 3691981, 3691980, 3691979, 3691978, 3691973, 3691972, 3691970, 3691969, 3691968, 3691967, 3691966, 3691965, 3691964, 3691960, 3691959, 3691958, 3691957, 3691956, 3691955, 3691954, 3691951, 3691950, 3691949, 3691948, 3691947, 3691946, 3691944, 3691943, 3691941, 3691940, 3691939, 3691938, 3691936, 3691935, 3691933, 3691931, 3691929, 3691928, 3691927, 3691926, 3691923, 3691920, 3691918, 3691917, 3691916, 3691915, 3691914, 3691911, 3691909, 3691908, 3691907, 3691906, 3691905, 3691904, 3691902, 3691901, 3691899, 3691898, 3691897, 3691896, 3691894, 3691892, 3691888, 3691887, 3691886, 3691885, 3691884, 3691883, 3691882, 3691881, 3691880, 3691879, 3691877, 3691876, 3691875, 3691874, 3691870, 3691869, 3691868, 3691867, 3691866, 3691865, 3691864, 3691863, 3691862, 3691861, 3691858, 3691857, 3691856, 3691855, 3691854, 3691853, 3691852, 3691851, 3691850, 3691849, 3691848, 3691847, 3691846, 3691845, 3691842, 3691841, 3691840, 3691839, 3691838, 3691836, 3691835, 3691834, 3691833, 3691832, 3691831, 3691830, 3691829, 3691828, 3691825, 3691823, 3691822, 3691819, 3691817, 3691816, 3691815, 3691814, 3691813, 3691811, 3691810, 3691809, 3691808, 3691806, 3691803, 3691802, 3691801, 3691800, 3691799, 3691798, 3691797, 3691796, 3691795, 3691794, 3691793, 3691792, 3691791, 3691790, 3691788, 3691786, 3691785, 3691780, 3691778, 3691776, 3691774, 3691773, 3691772, 3691771, 3691769, 3691768, 3691767, 3691766, 3691765, 3691764, 3691763, 3691762, 3691761, 3691760, 3691759, 3691758, 3691757, 3691756, 3691755, 3691754, 3691753, 3691752, 3691751, 3691750, 3691748, 3691747, 3691746, 3691745, 3691744, 3691743, 3691741, 3691740, 3691739, 3691738, 3691737, 3691736, 3691734, 3691733, 3691732, 3691730, 3691729, 3691728, 3691727, 3691724, 3691723, 3691722, 3691721, 3691720, 3691719, 3691715, 3691714, 3691713, 3691711, 3691710, 3691709, 3691708, 3691707, 3691706, 3691705, 3691704, 3691703, 3691702, 3691701, 3691700, 3691699, 3691697, 3691696, 3691693, 3691692, 3691691, 3691690, 3691689, 3691687, 3691685, 3691684, 3691683, 3691680, 3691679, 3691678, 3691676, 3691675, 3691674, 3691673, 3691672, 3691671, 3691670, 3691669, 3691668, 3691667, 3691666, 3691665, 3691663, 3691662, 3691661, 3691660, 3691659, 3691657, 3691656, 3691653, 1524686, 1524692, 1524698, 1524701, 1524702, 1524707, 1524719, 1524726, 1524734, 1524737, 1524740, 1524749, 1524752, 1524755, 1524761, 1524764, 1524770, 1524773, 1524776, 1524779, 1524782, 1524788, 1524792, 1524794, 1524797, 1524806, 1524821, 1524824, 1524827, 1524830, 1524836, 1524840, 1524845, 1524851, 1524853, 1524854, 1524855, 1524857, 1524860, 1524863, 1524869, 1524872, 1524875, 1524881, 1524895, 1524902, 1524905, 1524908, 1524911, 1524917, 1524923, 1524932, 1524941, 1524944, 1524947, 1524950, 1524968, 1524974, 1524977, 1524980, 1524983, 1524992, 1524995, 1524998, 1525004, 1525016, 1525019, 1525022, 1525025, 1525028, 1525031, 1525040, 1525052, 1525055, 1525058, 1525067, 1525079, 1525082, 1525094, 1525103, 1525109, 1525115, 1525118, 1525136, 1525151, 1525154, 1525157, 1525160, 1525166, 1525179, 1525184, 1525187, 1525190, 1525196, 1525203, 1525205, 1525208, 1525211, 1525223, 1525235, 1525238, 1525241, 1525244, 1525247, 3147997, 3147995, 3147994, 3147992, 3147989, 3147986, 3147985, 3147984, 3147983, 3147981, 3147980, 3147979, 3147974, 3147971, 3147965, 3147962, 3147959, 3147956, 3147953, 3147951, 3147950, 3147944, 3147943, 3147941, 3147939, 3147938, 3147935, 3147933, 3147932, 3147929, 3147922, 3147914, 3147913, 3147910, 3147908, 3147905, 3147902, 3147901, 3147899, 3147896, 3147895, 3147893, 3147890, 3147887, 3147884, 3147881, 3147875, 3147872, 3147870, 3147869, 3147868, 3147863, 3147857, 3147851, 3147850, 3147849, 3147848, 3147845, 3147843, 3147836, 3147833, 3147830, 3147829, 3147827, 3147824, 3147823, 3147821, 3147820, 3147812, 3147809, 3147806, 3147803, 3147800, 3147797, 3147794, 3147785, 3147782, 3147779, 3147776, 3147775, 3147774, 3147773, 3147770, 3147766, 3147765, 3147764, 3147762, 3147761, 3147760, 3147758, 3147757, 3147756, 3147755, 3147752, 3147751, 3147749, 3147748, 3147747, 3147746, 3147740, 3147739, 3147738, 3147737, 3147734, 3147733, 3147732, 3147731, 3147730, 3147727, 3147725, 3147722, 3147718, 3147716, 3147715, 3147713, 3147710, 3147707, 3147706, 3147704, 3147697, 3147695, 3147694, 3147692, 3147691, 3147687, 3147686, 3147683, 3147679, 3147671, 3147666, 3147664, 3147661, 3147659, 3147656, 3147653, 3147651, 3147644, 3147643, 3147641, 3147635, 3147632, 3147628, 3147627, 3147626, 3147624, 3147623, 3147621, 3147620, 3147617, 3147613, 3147611, 3147608, 3147605, 3147599, 3147596, 3147593, 3147592, 3147591, 3147590, 3147584, 3147581, 3147580, 3147577, 3147575, 3147572, 3147566, 3147564, 3147560, 3147557, 3147555, 3147554, 3147553, 3147552, 3147550, 3147548, 3147545, 3147542, 3147539, 3147538, 3147532, 3147530, 3147527, 3147525, 3147524, 3147523, 3147518, 3147515, 3147512, 3147509, 3147507, 3147504, 3147503, 3147498, 3147494, 3147493, 3147491, 3147488, 3147483, 3147482, 2452235, 2452229, 2452223, 2452220, 2452219, 2452217, 2452210, 2452209, 2452205, 2452203, 2452202, 2452201, 2452195, 2452193, 2452191, 2452183, 2452178, 2452175, 2452172, 2452160, 2452156, 2452145, 2452142, 2452141, 2452139, 2452130, 2452128, 2452124, 2452118, 2452117, 2452114, 2452112, 2452109, 2452097, 2452095, 2452094, 2452091, 2452088, 2452085, 2452084, 2452083, 2452082, 2452079, 2452078, 2452074, 2452073, 2452071, 2452069, 2452064, 2452063, 2452062, 2452061, 2452058, 2452054, 2452053, 2452052, 2452046, 2452043, 2452042, 2452040, 2452037, 2452031, 2452030, 2452028, 2452025, 2452022, 2452016, 2452012, 2452010, 2452004, 2452001, 2451998, 2451992, 2451989, 2451986, 2451977, 2451962, 2451959, 2451956, 2451953, 2451952, 2451950, 2451949, 2451942, 2451941, 2451938, 2451937, 2451935, 2451931, 2451929, 2451928, 2451925, 2451924, 2451922, 2451921, 2451918, 2451917, 2451914, 2451911, 2451908, 2451907, 2451904, 2451902, 2451899, 2451896, 2451893, 2451887, 2451881, 2451878, 2451875, 2451871, 2451869, 2451866, 2451864, 2451862, 2451854, 2451851, 2451845, 2451844, 2451842, 2451841, 2451838, 2451833, 2451831, 2451830, 4046405, 4046401, 4046400, 4046399, 4046395, 4046394, 4046388, 4046385, 4046380, 4046377, 4046364, 4046356, 4046341, 4046338, 4046334, 4046333, 4046329, 4046326, 4046320, 4046308, 4046307, 4046305, 4046302, 4046293, 4046290, 4046286, 4046281, 4046278, 4046272, 4046269, 4046266, 4046257, 4046254, 4046245, 4046236, 4046230, 4046224, 4046218, 4046212, 4046211, 4046209, 4046206, 4046190, 4046187, 4046185, 4046179, 4046177, 4046161, 4046153, 4046151, 4046149, 4046143, 4046137, 4046134, 4046122, 4046119, 4046116, 4046113, 4046109, 4046107, 4046104, 4046093, 4046080, 4046075, 4046071, 4046065, 4046062, 4046056, 4046050, 4046049, 4046047, 4046044, 4046038, 4046032, 4046029, 4046026, 4046025, 4046014, 4046011, 4046005, 4045999, 4045995, 4045984, 4045981, 4045958, 4045954, 4045952, 4045948, 4045942, 4045939, 4045936, 4045933, 4045923, 4045921, 4045920, 4045918, 4045915, 4045912, 4045909, 4045906, 4045891, 4045888, 4045882, 4045876, 4045875, 4045868, 118604, 118613, 118650, 118659, 118663, 118668, 118669, 118676, 118682, 118683, 118684, 118685, 118690, 118699, 118700, 118706, 118711, 118725, 118726, 118728, 118733, 118743, 118750, 118761, 118762, 118771, 118774, 118786, 118792, 118801, 118804, 118807, 118813, 118814, 118815, 118816, 118819, 118822, 118826, 118829, 118832, 118833, 118834, 118838, 118839, 118841, 118843, 118844, 118846, 118847, 118855, 118865, 118868, 118870, 118876, 118879, 118880, 118885, 118891, 118892, 118894, 118901, 118906, 118912, 118921, 118923, 118930, 118933, 118935, 118937, 118942, 118950, 118958, 118961, 118963, 118964, 118966, 118967, 118969, 118972, 118974, 118975, 118976, 118977, 118978, 118987, 118992, 118993, 119008, 119011, 119017, 119022, 119039, 119042, 119048, 119051, 119053, 119056, 119059, 119062, 119063, 119066, 119072, 119074, 119081, 119082, 119083, 119086, 119087, 119100, 119101]
POSLIST.sort()

def Bases_At_Pos(samfile, pos, chromname, minbasequal, minmapqual):
    'Return a string of the bases at that position.'
    position = 0
    coverage = 0
    bases = ""
    for pileupcolumn in samfile.pileup(reference=chromname, start=pos-1, end=pos):
        if ((pileupcolumn.pos+1) >= pos and (pileupcolumn.pos+1) <= pos):
            position = int(pileupcolumn.pos+1)
            coverage = int(pileupcolumn.n)
            for pileupread in pileupcolumn.pileups:
                if (pileupread.indel == 0 and pileupread.is_del == 0 and \
                (ord(pileupread.alignment.qual[pileupread.query_position])-33) >= minbasequal and \
                float(pileupread.alignment.mapq) >= minmapqual):
                    bases += pileupread.alignment.seq[pileupread.query_position]
    return position, coverage, bases

def eyre_method(bam, outfile, chrom):
    #open bam file with pySAM library
    samfile = pysam.Samfile(bam, 'rb')

    #open output file and write headers
    with open (outfile, 'w') as f:
        f.write('site\tA\tC\tG\tT\n')
        #for each position of interest write base counts
        for pos in POSLIST:
            hq_position, hq_coverage, hq_bases = Bases_At_Pos(samfile, int(pos), chrom, 30.0, 30.0)
            hq_basecounts = [ len([x for x in hq_bases if x == 'A']), len([x for x in hq_bases if x == 'C']), len([x for x in hq_bases if x == 'G']), len([x for x in hq_bases if x == 'T']) ]
            if(len([i for i in hq_basecounts if i>0])>=1):
                f.write('%s\t%s\n'%(hq_position, '\t'.join([str(i) for i in hq_basecounts])))
        f.close()


def pysam_pileup(bam, ref, chrom, loci, start, end):

    # Set the mpileup options
    mpileup_options = {
        "min_base_quality": 25,
        "min_mapping_quality": 30,
        "redo_baq": True
    }

    # Perform mpileup
    # pileup = bam.pileup(bam, **mpileup_options)
    pileup = bam.pileup(chrom, start, end, truncate=True, **mpileup_options)
    variant_sites = []

    for pileupcolumn in pileup:
        # print("\ncoverage at base %s = %s" % (pileupcolumn.pos, pileupcolumn.n))
        reads_all = len(pileupcolumn.pileups)
        # note: pileupcolumn.n ignores the quality filter so returns a higher number than expected

        column = {
            'loci' : loci,
            'chrom' : chrom,
            'pos' : pileupcolumn.pos,
            'reads_all' : reads_all,
            'insertions' : 0,
            'deletions' : 0,
            'A' : 0,
            'C' : 0,
            'T' : 0,
            'G' : 0,
        }

        for pileupread in pileupcolumn.pileups:
            if pileupread.indel > 0:
                column['insertions'] += 1
                continue
            if pileupread.is_del > 0:
                column['deletions'] += 1
                continue

            base = pileupread.alignment.query_sequence[pileupread.query_position]
            column[base] += 1
        
        # check if mixed
        calls = [column['insertions'], column['deletions'], column['A'], column['C'], column['T'], column['G']]
        sorted_count = sorted(calls, reverse=True)
        
        major = sorted_count[0]
        rest = sum(sorted_count[1:])
        
        if rest >= 2 or column['insertions'] > 0 or column['deletions'] > 0:
            print(pileupcolumn.pos)
            column['loci'] = loci
            column['major'] = major
            column['major_pc'] = round(100 * major / reads_all, 1)
            column['rest'] = rest
            column['rest_pc'] = round(100 * rest / reads_all, 1)
            variant_sites.append(column)

    return variant_sites


def summarise_mixed_sites(df, total_bases):
    # want total number of sites, number 
    rest_1_count = (df['rest'] == 1).sum()
    rest_n_count = (df['rest'] >= 2).sum()
    other_base_1_count = (df['rest'] - df['insertions'] - df['deletions'] == 1).sum()
    other_base_n_count = (df['rest'] - df['insertions'] - df['deletions'] >= 2).sum()
    del_1_count = (df['deletions'] == 1).sum()
    del_n_count = (df['deletions'] >= 2).sum()
    insert_1_count = (df['insertions'] == 1).sum()
    insert_n_count = (df['insertions'] >= 2).sum()

    values = {
        'total_positions': total_bases,
        'rest_1' : rest_1_count,
        'rest_2_plus' : rest_n_count,
        'other_base_1' : other_base_1_count,
        'other_base_2_plus' : other_base_n_count,
        'del_1' : del_1_count,
        'del_2_plus' : del_n_count,
        'insert_1' : insert_1_count,
        'insert_2_plus' : insert_n_count,
    }
    
    df = pd.DataFrame([values])
    return df



def main():
    parser = argparse.ArgumentParser(description="Calculate variation statistics and check for positions with a mix of bases called.")
    parser.add_argument("--ref", required=True, help="Path to the reference FASTA file")
    parser.add_argument("--bam", required=True, help="Path to the BAM file")
    parser.add_argument("--loci", required=True, help="Path to the TSV file containing start and end positions of relevant loci")
    parser.add_argument("--outfile_prefix", required=True, help="Prefix for output csv files")
    parser.add_argument("--chrom", required=False, default='CP010905.2', help="Chromosome on ref FASTA file")
    args = parser.parse_args()

    ref = pysam.FastaFile(args.ref)
    bam = pysam.AlignmentFile(args.bam)
    loci_file = args.loci
    chrom = args.chrom
    outfile_prefix = args.outfile_prefix

    eyre_method(args.bam, f"{outfile_prefix}_eyre.tsv", chrom)

    loci_df = pd.read_csv(loci_file, sep='\t')
    variant_sites = []
    total_sites = 0
    for loci, start, end in zip(loci_df['loci'], loci_df['start'], loci_df['end']):
        # For each loci the function returns a list of dictionaries with a dict for each column in the pileup
        sites = pysam_pileup(bam, ref, chrom, loci, int(start), int(end))
        variant_sites.extend(sites)
        total_sites += end-start
    
    col_names = ['loci', 'chrom', 'pos', 'reads_all', 'major', 'rest', 'major_pc', 'rest_pc', 'insertions', 'deletions', 'A', 'C', 'T', 'G']
    df = pd.DataFrame(columns=col_names)
    if len(variant_sites) > 0:
        df = pd.DataFrame(variant_sites)
        df = df[col_names]
    df.to_csv(f"{outfile_prefix}.csv", index=False)
    
    summary_df = summarise_mixed_sites(df, total_sites)
    summary_df.to_csv(f"{outfile_prefix}_summarised.csv", index=False)

if __name__ == "__main__":
    main()


# Simpler version using pysamstats, but can't filter the reads based on quality
# def find_variant_sites(bam, fasta, chromosome, loci, start, end):
#     stats_variation = pysamstats.stat_variation(bam, fasta, chrom=chromosome, start=start, end=end, truncate=True)
    
#     variant_sites = []
#     for _column in stats_variation:
#         column = _column.copy()
    
#         reads_all = column['reads_all']
#         insertions = column['insertions']
#         deletions = column['deletions']

#         # Check if there are more than two bases in the minor group
#         calls = [insertions, deletions, column['A'], column['C'], column['T'], column['G']]
#         sorted_count = sorted(calls, reverse=True)
        
#         major = sorted_count[0]
#         rest = sum(sorted_count[1:])
        
#         if rest > 2 or insertions > 0 or deletions > 0:
#             column['loci'] = loci
#             column['major'] = major
#             column['major_pc'] = round(100 * major / reads_all, 1)
#             column['rest'] = rest
#             column['rest_pc'] = round(100 * rest / reads_all, 1)
#             variant_sites.append(column)
#     return variant_sites