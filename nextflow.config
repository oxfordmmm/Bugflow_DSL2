// profiles

process {
    errorStrategy = 'ignore'
}

profiles {
    conda {
        params {
            ridom_scheme_path = "${projectDir}/data/ridom_scheme"
        }

        process {
            withLabel: "abricate" { 
                conda = "${projectDir}/conda/bugflow_abricate.yaml"
            }

            withLabel: "amr_finder" { 
                conda = "${projectDir}/conda/bugflow_amr_finder.yaml"
            }

            withLabel: "blast" { 
                conda = "${projectDir}/conda/bugflow_blast.yaml"
            }

            withLabel: "fastqc" { 
                conda = "${projectDir}/conda/bugflow_fastqc.yaml"
            }

            withLabel: "mlst" { 
                conda = "${projectDir}/conda/bugflow_mlst.yaml"
            }

            withLabel: "mob_suite" { 
                conda = "${projectDir}/conda/bugflow_mob_suite.yaml"
            }

            withLabel: "non_perl" { 
                conda = "${projectDir}/conda/bugflow_non_perl.yaml"
            }

            withLabel: "platon" { 
                conda = "${projectDir}/conda/bugflow_platon.yaml"
            }

            withLabel: "quast" { 
                conda = "${projectDir}/conda/bugflow_quast.yaml"
            }

            withLabel: "shovill" { 
                conda = "${projectDir}/conda/bugflow_shovill.yaml"
            }

            withLabel: "snippy" { 
                conda = "${projectDir}/conda/bugflow_snippy.yaml"
            }

            withLabel: "pysam" { 
                conda = "${projectDir}/conda/bugflow_pysam.yaml"
            }

            withLabel: "kraken2" { 
                conda = "${projectDir}/conda/kraken2.yaml"
            }
        }

        conda.cacheDir = "${projectDir}/conda"
        conda.useMamba = true
    }

    docker {
        params {
            ridom_scheme_path = "/bugflow_data/ridom_scheme"
        }
        process {
            withLabel: "abricate" { 
                container = "oxfordmmm/bugflow_abricate"
            }

            withLabel: "amr_finder" { 
                container = "oxfordmmm/bugflow_amr_finder"
            }

            withLabel: "blast" { 
                container = "oxfordmmm/bugflow_blast"
            }

            withLabel: "fastqc" { 
                container = "oxfordmmm/bugflow_fastqc"
            }

            withLabel: "mlst" { 
                container = "oxfordmmm/bugflow_mlst"
            }

            withLabel: "mob_suite" { 
                container = "oxfordmmm/bugflow_mob_suite"
            }

            withLabel: "non_perl" { 
                container = "oxfordmmm/bugflow_non_perl"
            }

            withLabel: "platon" { 
                container = "oxfordmmm/bugflow_platon"
            }

            withLabel: "quast" { 
                container = "oxfordmmm/bugflow_quast"
            }

            withLabel: "shovill" { 
                container = "oxfordmmm/bugflow_shovill"
            }

            withLabel: "snippy" { 
                container = "oxfordmmm/bugflow_snippy"
            }

            withLabel: "pysam" { 
                container = "oxfordmmm/bugflow_pysam"
            }

            withLabel: "kraken2" { 
                container = "oxfordmmm/bugflow_kraken2"
            }
        }

        docker.enabled = true
    }

    oci {
        workDir = "/mnt/scratch_2/work"
        process {
            cpus = 4 
        }
        params {
            cdiff_amr_fasta = "/mnt/scratch/test_bugflow/input/Cdiff_AMR/Blastn/cdiffamr_full_toxin.fasta"
        }
    }
}

// description
manifest {
    homePage = 'https://github.com/oxfordmmm/Bugflow_DSL2'
    description = 'Pipeline for mapping, variant calling and assembling bacterial sequencing data'
    mainScript = 'main.nf'
    version = '0.2'
}

// error options 
//default halt pipeline
//process.errorStrategy {task.attempt==1 ? 'retry' : 'finish'} //this only completes already pending tasks
//process.errorStrategy = 'ignore' //this logs the error, prevents subsequent tasks running, but continues other samples


// reporting
report {
    enabled = true
    file = "nextflow_reports/report.html"
}

timeline {
    enabled = true
    file = "nextflow_reports/timeline.html"
}


trace {
    enabled = true
    file = "nextflow_reports/trace.txt"
}
